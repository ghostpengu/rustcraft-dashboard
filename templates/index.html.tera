<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
</head>
<div class="top-bar">
  <div class="logo">Your Logo</div>
  <ul class="nav-links">
    <li><a class="button" href="">Console</a></li>
    <li><a class="button" href="">Files</a></li>
    <li><a class="button" href="register">Register/Login</a></li>

  </ul>
</div>

<body>
  <div class="main">
    <div id="output"></div>
    <div id="buttons-container">
      <button class="button" id="init">Init</button>
      <button class="button" id="start">Start</button>
      <button class="button" id="read">Read</button>
      <button class="button" id="exit">Exit</button>
      <input id="command" type="text" />
      <button id="sendc">Send</button>
    </div>

  </div>

</body>
<style>
  body {
    background-color: #242424;
    font-family: Arial, sans-serif;
  }

  .main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    margin: 0;
    background-color: #242424;
    font-family: Arial, sans-serif;
  }

  #buttons-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-bottom: 20px;
  }

  .top-bar {
    background-color: #333;
    color: #fff;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    position: fixed;
    /* Fixed position */
    top: 0;
    /* Stick it to the top */
    left: 0;
    /* Stick it to the left */
    width: 100%;
    /* Take full width */
    z-index: 1000;
    /* Ensure it's above other content */
  }

  .logo {
    font-size: 24px;
  }

  .nav-links {
    list-style-type: none;
    margin: 0;
    padding: 0;
    text-align: center;
    /* Center the text within the container */
  }

  .nav-links li {
    display: inline-block;
    /* Make list items inline-block to appear in a row */
    margin: 0 100px;
    /* Add margin to the list items for spacing */
  }



  .nav-links li a {
    color: #fff;
    text-decoration: none;
    background-color: transparent;
  }

  .nav-links li a:hover {
    text-decoration: underline;
  }

  #command {
    padding: 8px;
    margin: 5px;
    font-size: 14px;
    background-color: #727272;
    border: 1px solid #727272;
    color: white;
    border-radius: 5px;
  }

  /* CSS */
  .button {
    background-color: rgba(0, 191, 45, 0.791);
    appearance: none;

    border: 2px solid #1A1A1A;
    border-radius: 15px;
    box-sizing: border-box;
    color: #000000;
    cursor: pointer;
    display: inline-block;
    font-family: Roobert, -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-size: 16px;
    font-weight: 600;
    line-height: normal;
    margin: 0;
    min-height: 20px;
    min-width: 0;
    outline: none;
    padding: 10px 24px;
    text-align: center;
    text-decoration: none;
    transition: all 300ms cubic-bezier(.23, 1, 0.32, 1);
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    width: 100%;
    will-change: transform;
  }

  .button:disabled {
    pointer-events: none;
  }

  .button:hover {
    color: #fff;
    background-color: #002d04;
    box-shadow: rgba(0, 0, 0, 0.25) 0 8px 15px;
    transform: translateY(-2px);
  }

  .button:active {
    box-shadow: none;
    transform: translateY(0);
  }

  #sendc {
    padding: 10px;
    font-size: 14px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  #sendc:hover {
    background-color: #2980b9;
  }

  #output {
    padding: 20px;
    background-color: #727272;
    border: 1px solid #727272;
    border-radius: 5px;
    min-width: 600px;
    color: white;
  }

  #output {
    white-space: pre;
    font-family: monospace;
  }
</style>
<script>
  function getCookie(name) {
    const cookieName = name + "="; // the name of the cookie followed by "="
    const decodedCookie = decodeURIComponent(document.cookie); // decode the cookie string
    const cookieArray = decodedCookie.split(";"); // split the string into an array of cookies
    for (let i = 0; i < cookieArray.length; i++) {
      // loop through each cookie
      let cookie = cookieArray[i].trim(); // remove leading and trailing whitespaces
      if (cookie.indexOf(cookieName) === 0) {
        // if this is the cookie we're looking for
        return cookie.substring(cookieName.length, cookie.length); // return its value
      }
    }
    return ""; // return empty string if cookie not found
  }
  const token = getCookie("token");
  fetch("/read/" + token)
    .then((response) => {
      // Check if the request was successful (status code 200)
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.text(); // Retrieve the raw text content
    })
    .then((data) => {
      // This function will be executed when the request is successful
      console.log("Data:", data);

      // Use the data as needed, for example, updating the DOM
      document.getElementById("output").textContent = data;
    })
    .catch((error) => {
      // This function will be executed if there is an error
      console.error("Error:", error);
    });
  var send = document.getElementById("sendc");
  send.addEventListener("click", function () {
    // This function will be executed when the button is clicked
    if (document.getElementById("command").value == "exit") {
      fetch("/exit/" + token);
    } else {
      fetch("/c/" + document.getElementById("command").value + "/" + token);
      setTimeout(function () {
        fetch("/read/" + token)
          .then((response) => {
            // Check if the request was successful (status code 200)
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.text(); // Retrieve the raw text content
          })
          .then((data) => {
            // This function will be executed when the request is successful
            console.log("Data:", data);

            // Use the data as needed, for example, updating the DOM
            document.getElementById("output").textContent = data;
          })
          .catch((error) => {
            // This function will be executed if there is an error
            console.error("Error:", error);
          });
      }, 30);

    }
  });
  var init = document.getElementById("init");
  init.addEventListener("click", function () {
    // This function will be executed when the button is clicked
    fetch("init/" + token);
  });
  var button = document.getElementById("read");

  // Add a click event listener to the button
  button.addEventListener("click", function () {
    // This function will be executed when the button is clicked
    fetch("/read/" + token)
      .then((response) => {
        // Check if the request was successful (status code 200)
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.text(); // Retrieve the raw text content
      })
      .then((data) => {
        // This function will be executed when the request is successful
        console.log("Data:", data);

        // Use the data as needed, for example, updating the DOM
        document.getElementById("output").textContent = data;
      })
      .catch((error) => {
        // This function will be executed if there is an error
        console.error("Error:", error);
      });
  });

  var start = document.getElementById("start");
  start.addEventListener("click", function () {
    // This function will be executed when the button is clicked
    fetch("/start/" + token);
  });

  var exit = document.getElementById("exit");
  exit.addEventListener("click", function () {
    // This function will be executed when the button is clicked
    fetch("/exit/" + token);
  });
</script>

</html>